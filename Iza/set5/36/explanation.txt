----------------------------------------------------------------------------
  definition:         rewrite: 
----------------------------------------------------------------------------
  int x[8];           x[4]            

pointer notation:  *(x + 4)
       semantics:  x + 4 points to the location of the 4th int beyond x.
                   That element is reached using the dereference operator (*)

----------------------------------------------------------------------------
  int x[8];           x[2] = x[3];

pointer notation: *(x + 2)=*(x + 3);
       semantics: x + 2 points to the location of the 2nd int element beyond x
                  and x + 3 does so to the 3rd int element beyond x. To update
                  the value of x[2] to x[3] we need to use dereference 
                  operator on both sides
----------------------------------------------------------------------------
  char *argv[8];      cout << argv[2];

pointer notation: cout << *(argv + 2);
       semantics: argv + 2 points to the location of the 2nd char element beyond
                  argv and to use get its value we use the dereference
                  operator
----------------------------------------------------------------------------
  int x[8];           &x[10] - &x[3];
 
pointer notation: &*(x + 10)-&*(x + 3);
       semantics: x+10 points to the hypothetical (though non existent) 
                  position of the 10th integer in x, when using the & we get
                  the adress in memory of that variable. Subtracting the 
                  address of the 3rd int in x (pointed to by x + 3) we get 
                  the number of integers stored between these indices, i.e. 7.
----------------------------------------------------------------------------
  main's argv;        argv++[0];

pointer notation: *argv++
       semantics: since we are using post-incrementation here, we want it 
                  to not be taken into account in the current expression.
                  hence argv++ points to argv[0] in this expression but since it 
                  is post-incremented from next expression using argv, *argv 
                  will point to argv[1].
----------------------------------------------------------------------------
  main's argv;        argv[0]++;

pointer notation: (*argv)++ 
       semantics: argv points to the first entry of argv and post-incrementing
                  it makes it so the next call of *argv (or equivalently 
                  argv[0]) will omit the first character.
----------------------------------------------------------------------------
  main's argv;        ++argv[0];

pointer notation: ++*argv 
       semantics: *argv points to the first element of argv and but since we 
                  are using pre-incrementation it is taken into account within
                  the expression itself thus ++*argv points to argv[1].
----------------------------------------------------------------------------
  main's argv;        ++argv[0][2];

pointer notation: ++*(*argv + 2)
       semantics: argv points to the first element of argv and *argv + 2 points
       to the third element of first element of argv. Then we pre-increment
       the whole expression to update the value within the expression itself.
----------------------------------------------------------------------------